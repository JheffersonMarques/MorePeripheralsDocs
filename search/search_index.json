{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the More Peripherals Docs","text":"<p>More peripherals is a addon mod for CC:Tweaked adding new peripherals and some tools, focusing on allowing the player to interact with vanilla features in a new and automatable way.</p> <p>Any issues can be reported to the issues page on github, and you can also check the changelogs.</p> <p></p>"},{"location":"induction-charger/","title":"Induction Charger","text":"<p>Allows turtles to be charged via FE (Forge Energy)</p>"},{"location":"items/ender-bag/","title":"Ender bag","text":"<p>The ender bag allows players to open their personal ender chest from anywhere</p> <p>The ender bag can also be used by turtles by the Ender Bag Upgrade</p>"},{"location":"items/facade-tool/","title":"Facade Tool","text":"<p>The facade tool allows players to hide computer craft cables</p> <p>By Shift + Right Clicking a full block, you copy its appearance to the facade tool</p> <p>Right Clicking a cable sets its facade</p> <p>Shift + Right Click a cable removes the facade</p>"},{"location":"items/keyboard/","title":"Keyboard","text":"<p>The keyboard allows players to send <code>char</code>,<code>key</code>,<code>key_up</code> and <code>paste</code> events from outside a computer The keyboard by default has a range of 16 blocks, but can be reduced or increased in the configurations</p> <p>Shift + Right Click on a computer to set it as the event receptor</p>"},{"location":"items/magnet/","title":"Magnet","text":"<p>The magnet when active makes items come towards the user</p> <p>Right Clicking the magnet switches states</p> <p>The magnet can also be used by turtles by the Magnetic Turtle Upgrade</p>"},{"location":"items/magnetic-card/","title":"Magnetic Card","text":"<p>A Magnetic Card can store some small amount of data, on right clicking on a Magnetic Card Manipulator  sends an <code>card_read</code> event that contains the data stored on the card, also placing or removing the card from the magnetic card manipulator sends the <code>card_insert</code> and <code>card_remove</code> events respectvely</p> <p>The cards are dyeable on the latest updates</p>"},{"location":"items/player-card/","title":"Player Card","text":"<p>A player card stores a reference to the current player, they are used both in Ender Chest Interface and Player Interface</p> <p>The cards are set by Shift + Right Clicking with it in hand</p>"},{"location":"items/spawner-card/","title":"Spawner Card","text":"<p>A spawner card stores data about mobs, by hitting mobs with it you can get mob data that is used on Spawner Interface, they also can be written by the spawner interface.</p>"},{"location":"peripherals/anvil/","title":"Anvil","text":"<p>Allows computers to use anvils as peripherals</p> Functions Description combine(from,fromSlot, resources, resourcesSlot, xpSource) Combines items from inside of inventories accesible to the computers via the Inventory API, using 8 Bottles o' Enchanting per item. rename(from,slot,name) Renames an item with the name given"},{"location":"peripherals/anvil/#combinefrom-fromslot-resources-resourcesslot-xpsource","title":"combine(from, fromSlot, resources, resourcesSlot, xpSource)","text":"<p>Description</p> <p>Combines items from inside of inventories accesible to the computers via the Inventory API, using 8 Bottles o' Enchanting per item.</p> <p>Parameters</p> <ol> <li>from : string - The inventory from where the base item is located</li> <li>fromSlot : number - The slot where the base item is present</li> <li>resources : string - The inventory from where the item that will be combined is located</li> <li>resourcesSlot : number - The slot where the combined item is present</li> <li>xpSource : string - An inventory from which the xp bottles will be used to combine the items</li> </ol> <p>Returns</p> <ol> <li>boolean - The state of the operation</li> <li>string - error message, If there is a failure on the operation</li> </ol> <p>Usage</p> Item Combine Example<pre><code>local anvil = peripheral.find(\"anvil_interface\");\nlocal state, err = anvil.combine(\"left\",1,\"right\",1,\"top\");\n\nif(err) -- If there was an error, display the error message\n    error(err);\n\nprint(state); -- Display if could combine items\n</code></pre>"},{"location":"peripherals/anvil/#renamefrom-slot-name","title":"rename(from, slot, name)","text":"<p>Description</p> <p>Renames an item with the name given</p> <p>Parameters</p> <ol> <li>from : string - The inventory from where the base item is located</li> <li>slot : number - The slot where the base item is present</li> <li>name : string - The name to be set for the item</li> </ol> <p>Returns</p> <ol> <li>boolean - The state of the operation</li> <li>string - error message, If there is a failure on the operation</li> </ol> <p>Usage</p> Item Rename Example<pre><code>local anvil = peripheral.find(\"anvil_interface\");\nlocal state, err = anvil.rename(\"left\",1,\"Very Nice Looting Sword\");\n\nif(err) -- If there was an error, display the error message\n    error(err);\n\nprint(state); -- Display if could rename the item\n</code></pre>"},{"location":"peripherals/beehive-interface/","title":"Beehive Interface","text":"<p>Allows retriving information about beehives, and also colleting either the honey comb, or honey bottles using any computer or turtle</p> <p>The Beehive Interface needs an Beehive or Nest in any of the sides of it to work.</p> Functions Description hasBees() Check if bees are present on the hive getBeeCount() Checks how many bees are in the hive gotFireNear() Checks if there is fire near the hive getBees() Gets the state of the bees in the hive getHoneyLevel() Checks the state of the honey inside the hive collectHoney(resources, output, bottled) Collects the honey"},{"location":"peripherals/beehive-interface/#hasbees","title":"hasBees()","text":"<p>Description</p> <p>Check if bees are present on the hive</p> <p>Returns</p> <ol> <li>boolean - The state of the operation or if there are bees inside of the hive</li> <li>string - Error message, If there is a failure on the operation </li> </ol>"},{"location":"peripherals/beehive-interface/#getbeecount","title":"getBeeCount()","text":"<p>Description</p> <p>Checks how many bees are in the hive</p> <p>Returns</p> <ol> <li>boolean | number - The state of the operation or the number of bees present</li> <li>string - Error message, If there is a failure on the operation </li> </ol>"},{"location":"peripherals/beehive-interface/#gotfirenear","title":"gotFireNear()","text":"<p>Description</p> <p>Checks if there is fire near the hive</p> <p>Returns</p> <ol> <li>boolean - The state of the operation or the if there is fire close to the hive</li> <li>string - Error message, If there is a failure on the operation </li> </ol>"},{"location":"peripherals/beehive-interface/#getbees","title":"getBees()","text":"<p>Description</p> <p>Gets the state of the bees in the hive</p> <p>Returns</p> <ol> <li>boolean | table - The state of the operation or the state of the bees on the hive</li> <li>string - Error message, If there is a failure on the operation </li> </ol>"},{"location":"peripherals/beehive-interface/#gethoneylevel","title":"getHoneyLevel()","text":"<p>Description</p> <p>Checks the state of the honey inside the hive</p> <p>Returns</p> <ol> <li>boolean | number - The state of the operation or a number representing the honey level (1..5)</li> <li>string - Error message, If there is a failure on the operation</li> </ol>"},{"location":"peripherals/beehive-interface/#collecthoneyresources-output-bottled","title":"collectHoney(resources, output, bottled)","text":"<p>Description</p> <p>Collects the honey as honey bottles or honeycombs</p> <p>Parameters</p> <ol> <li>resources: string - The input from where to source bottles or shears</li> <li>output: string - The place where to put the collected resources</li> <li>bottled: boolean - If true the will collect honey bottles, if false will collect honeycombs</li> </ol> <p>Returns</p> <ol> <li>boolean - The state of the operation</li> <li>string - Error message, If there is a failure on the operation</li> </ol> <p>Usage</p> Honey Collection Example<pre><code>local beehive = peripheral.find(\"beehive_interface\");\nlocal state, err = beehive.collectHoney(\"left\",\"top\", false);\n\nif(err) -- If there was an error, display the error message\n    error(err)\n\nprint(state); -- Display if could collect from the hive\n</code></pre>"},{"location":"peripherals/crafter/","title":"Crafter","text":"<p>Allows Autocrafting without the need to have a crafting turtle or a turtle at all</p> Functions Description craft(from, to, recipe) Crafting an item if the recipes match"},{"location":"peripherals/crafter/#craftfrom-to-recipe","title":"craft(from, to, recipe)","text":"<p>Description</p> <p>Crafting an item if the recipes match</p> <p>Parameters</p> <ol> <li>from: string - Inventory to get crafting items</li> <li>to: string - Inventory to send the crafted items</li> <li>recipe: table - A list of slots defining the structure of the recipe</li> </ol> <p>\ud83d\udca1 IMPORTANT</p> <p>The recipe table is an array of size 9, where the value in the array defines the slot that the crafter will try to use</p> <p>If there is a 0, no slot is picked</p> <p>Returns</p> <ol> <li>boolean - The state of the operation</li> <li>string - Error message, If there is a failure on the operation </li> </ol> <p>Usage</p> Chest Crafting Example<pre><code>local crafter = peripheral.wrap(\"crafter\");\n\n-- Inventory to get items from\nlocal inputInv = peripheral.wrap(\"minecraft:chest_0\")   \n\n-- Inventory to store items crafted\nlocal outputInv = peripheral.wrap(\"minecraft:chest_1\")  \n\n-- Assuming there are planks in the first slot of the input chest\nlocal state, err = crafter.craft(\n    peripheral.getName(inputInv),\n    peripheral.getName(outputInv),\n    {\n      1,1,1,\n      1,0,1,\n      1,1,1\n    }\n)\n\nif(err) -- If there was an error, display the error message\n    error(err)\n\nprint(state); -- Display if could craft the item\n</code></pre>"},{"location":"peripherals/enchanting-table/","title":"Enchanting Table","text":"<p>Allows for automated enchanting and getting information about enchantments</p> Functions Description getEnchantsFor(from, slot) Gets all possible enchantments for the item enchant(from, slot, resources) Enchants an item with a random supported enchantment, if there is enough resources to do so"},{"location":"peripherals/enchanting-table/#getenchantsforfrom-slot","title":"getEnchantsFor(from, slot)","text":"<p>Description</p> <p>Gets all possible enchantments for the item</p> <p>Parameters</p> <ol> <li>from: string - Inventory from where to get the item</li> <li>slot: number - The slot for the item</li> </ol> <p>Returns</p> <ol> <li>boolean - The state of the operation</li> <li>string | table - Error message, If there is a failure on the operation or a table with a list for all supported enchantments</li> </ol>"},{"location":"peripherals/enchanting-table/#enchantfrom-slot-resources","title":"enchant(from, slot, resources)","text":"<p>Description</p> <p>Enchants an item with a random supported enchantment, if there is enough resources to do so</p> <p>Parameters</p> <ol> <li>from: string - Inventory from where to get the item to enchant</li> <li>slot: number - The slot for the item to enchant</li> <li>resources: string - Inventory with the needed resources to do the enchantment</li> </ol> <p>\ud83d\udca1 IMPORTANT</p> <p>The enchantment process consumes 8 Bottles o' Enchanting and 1 lapis lazuli per enchant</p> <p>Returns</p> <ol> <li>boolean - The state of the operation</li> <li>string - Error message, If there is a failure on the operation </li> </ol>"},{"location":"peripherals/ender-chest-interface/","title":"Ender chest interface","text":"<p>Allows for manipulating the contents of a player ender chest if there is a bound Player Card</p> <p>All of the functions present here follows the rules of the Inventory API, though the ender chest interface isn't itself considered a inventory</p>"},{"location":"peripherals/grinder/","title":"Grinder","text":"<p>A mob grinder that can utilize any sword, and applies its effects like Fire Aspect or Sharpness Hitting on a 3x3 Area Around it.</p> Functions Description attack() Attack any living mob around it (apply sword enchantments) hasSword() Returns a boolean if the grinder has a sword in it pullSword(from, slot) Pulls a sword from the target inventory pushSword(to) Pushes a sword to the target inventory"},{"location":"peripherals/grinder/#attack","title":"attack()","text":"<p>Description</p> <p>Attack any living mob around it (apply sword enchantments)</p> <p>Returns</p> <ol> <li>boolean - The state of the operation</li> <li>string - Error message, If there is a failure on the operation</li> </ol>"},{"location":"peripherals/grinder/#hassword","title":"hasSword()","text":"<p>Description</p> <p>Returns a boolean if the grinder has a sword in it</p> <p>Returns</p> <ol> <li>boolean - If there is any sword in the grinder</li> </ol>"},{"location":"peripherals/grinder/#pullswordfrom-slot","title":"pullSword(from, slot)","text":"<p>Description</p> <p>Pulls a sword from the target inventory</p> <p>Parameters</p> <ol> <li>from: string - Inventory from where to get the sword</li> <li>slot: number - The slot for the sword</li> </ol> <p>Returns</p> <ol> <li>boolean - The state of the operation</li> <li>string - Error message, If there is a failure on the operation</li> </ol>"},{"location":"peripherals/grinder/#pushswordto","title":"pushSword(to)","text":"<p>Description</p> <p>Pushes a sword to the target inventory</p> <p>Parameters</p> <ol> <li>to: string - Inventory from where to send the sword</li> </ol> <p>Returns</p> <ol> <li>boolean - The state of the operation</li> <li>string - Error message, If there is a failure on the operation</li> </ol>"},{"location":"peripherals/grindstone/","title":"Grindstone","text":"<p>Allows interactions with the grindstone</p> Functions Description combine(from, fromSlot, resource, resourceSlot) Combine items following the rules of the grindstone disenchant(from, slot, [ collector ]) Desenchants an item"},{"location":"peripherals/grindstone/#combinefrom-fromslot-resource-resourceslot","title":"combine(from, fromSlot, resource, resourceSlot)","text":"<p>Description</p> <p>Combine items following the rules of the grindstone</p> <p>Paramenters</p> <ol> <li>from : string - The inventory from where the base item is located</li> <li>fromSlot : number - The slot where the base item is present</li> <li>resources : string - The inventory from where the item that will be combined is located</li> <li>resourcesSlot : number - The slot where the combined item is present</li> </ol> <p>Returns</p> <ol> <li>boolean - The state of the operation</li> <li>string - Error message, If there is a failure on the operation</li> </ol>"},{"location":"peripherals/grindstone/#disenchantfrom-slot-collector","title":"disenchant(from, slot, [ collector ])","text":"<p>Description</p> <p>Desenchants an item</p> <p>Paramenters</p> <ol> <li>from : string - The inventory from where the item is located</li> <li>slot : number - The slot where the item is present</li> <li>?collector : string - An experience collector to recieve the XP from the disenchanting process</li> </ol> <p>Returns</p> <ol> <li>boolean - The state of the operation</li> <li>string - Error message, If there is a failure on the operation</li> </ol>"},{"location":"peripherals/loom/","title":"Loom","text":"<p>Allows the for banner manipulation</p> Functions Description paintBanner(input, bannerSlot, dyeSlot, pattern) Paints a pattern on a banner (consumes dyes equivalent to the quantity of banners) clearBanner(input, slot) Clear all patterns on a banner"},{"location":"peripherals/loom/#paintbannerinput-bannerslot-dyeslot-pattern","title":"paintBanner(input, bannerSlot, dyeSlot, pattern)","text":"<p>Description</p> <p>Paints a pattern on a banner (consumes dyes equivalent to the quantity of banners)</p> <p>Parameters</p> <ol> <li>input: string - Inventory where the items are located</li> <li>bannerSlot: number - Slot referring to the banner to be painted</li> <li>dyeSlot: number - Slot referring to the dye used to paint</li> <li>pattern: number - An integer that defines a banner pattern</li> </ol> <p>Returns</p> <ol> <li>boolean - The state of the operation or if there are bees inside of the hive</li> <li>string - Error message, If there is a failure on the operation </li> </ol>"},{"location":"peripherals/loom/#clearbannerinput-slot","title":"clearBanner(input, slot)","text":"<p>Description</p> <p>Clear all patterns on a banner</p> <p>Parameters</p> <ol> <li>input: string - Inventory where the items are located</li> <li>slot: number - Slot referring to the banner to be cleared</li> </ol> <p>Returns</p> <ol> <li>boolean - The state of the operation or if there are bees inside of the hive</li> <li>string - Error message, If there is a failure on the operation </li> </ol>"},{"location":"peripherals/magnetic-card-manipulator/","title":"Magnetic Card Manipulator","text":"<p>Allows the reading and writing of Magnetic Cards</p> Functions Description readCard() Read a card data writeCard(data) Writes a card data hasCard() Check the presence of a card ejectCard() Drops the current card setLabel(label) Sets a card label getLabel() Gets the card's label setSecure(value) Sets if the card should hide the its data tooltip"},{"location":"peripherals/magnetic-card-manipulator/#readcard","title":"readCard()","text":"<p>Description</p> <p>Read a card data</p> <p>Returns</p> <ol> <li>boolean | string - The state of the operation or data string</li> <li>string - Error message, If there is a failure on the operation </li> </ol>"},{"location":"peripherals/magnetic-card-manipulator/#writecarddata","title":"writeCard(data)","text":"<p>Description</p> <p>Writes a card data</p> <p>Parameters</p> <ol> <li>data: string - the value to store</li> </ol> <p>Returns</p> <ol> <li>boolean - The state of the operation </li> <li>string - Error message, If there is a failure on the operation </li> </ol>"},{"location":"peripherals/magnetic-card-manipulator/#hascard","title":"hasCard()","text":"<p>Description</p> <p>Check the presence of a card</p> <p>Returns</p> <ol> <li>boolean - if there is a card present</li> </ol>"},{"location":"peripherals/magnetic-card-manipulator/#ejectcard","title":"ejectCard()","text":"<p>Description</p> <p>Drops the current card</p> <p>Returns</p> <ol> <li>boolean - if could drop the card</li> </ol>"},{"location":"peripherals/magnetic-card-manipulator/#setlabellabel","title":"setLabel(label)","text":"<p>Description</p> <p>Sets a card label </p> <p>Parameters</p> <ol> <li>label: string - the label to set</li> </ol> <p>Returns</p> <ol> <li>boolean - if rename the card</li> </ol>"},{"location":"peripherals/magnetic-card-manipulator/#getlabel","title":"getLabel()","text":"<p>Description</p> <p>Gets the card's label</p> <p>Returns</p> <ol> <li>boolean | string - The state of the operation or the label</li> <li>string - Error message, If there is a failure on the operation </li> </ol>"},{"location":"peripherals/magnetic-card-manipulator/#setsecurevalue","title":"setSecure(value)","text":"<p>Description</p> <p>Sets if the card should hide the its data tooltip</p> <p>Parameters</p> <ol> <li>value: boolean - the sensibility flag</li> </ol> <p>Returns</p> <ol> <li>boolean | string - The state of the operation or the label</li> <li>string - Error message, If there is a failure on the operation </li> </ol>"},{"location":"peripherals/player-interface/","title":"Player Interface","text":"<p>Allows for manipulating the contents of a player inventory and do some action as that player if there is a bound Player Card</p> Functions Description consume(slot) Makes the player eat an edible item in its inventory lookAt(x, y, z) Makes the player look at a coordinate displayMessage(msg, [ tooltip ]) Shows a message to the player <p>The inventory functions follows the rules of the Inventory API, though the player interface isn't itself considered a inventory</p>"},{"location":"peripherals/player-interface/#consumeslot","title":"consume(slot)","text":"<p>Description</p> <p>Makes the player eat an edible item in its inventory</p> <p>Parameters</p> <ol> <li>slot: number - The slot for the edible item</li> </ol> <p>Returns</p> <ol> <li>boolean - The state of the operation</li> <li>string - Error message, If there is a failure on the operation</li> </ol>"},{"location":"peripherals/player-interface/#lookatx-y-z","title":"lookAt(x, y, z)","text":"<p>Description</p> <p>Makes the player look at a coordinate</p> <p>Parameters</p> <ol> <li>x: number - the target's x position,</li> <li>y: number - the target's y position,</li> <li>z: number - the target's z position </li> </ol> <p>Returns</p> <ol> <li>boolean - The state of the operation</li> <li>string - Error message, If there is a failure on the operation</li> </ol>"},{"location":"peripherals/player-interface/#displaymessagemsg-tooltip","title":"displayMessage(msg, [ tooltip ])","text":"<p>Description</p> <p>Shows a message to the player</p> <p>Parameters</p> <ol> <li>msg: string - a message to be sent</li> <li>?tooltip: boolean - if the message should be display as a tooltip, instead of a chat message</li> </ol> <p>Returns</p> <ol> <li>boolean - The state of the operation</li> <li>string - Error message, If there is a failure on the operation</li> </ol>"},{"location":"peripherals/scanner/","title":"Scanner","text":"<p>Allows computers to read the data from written books, book and quills, printed pages and printed books</p> Functions Description getPage(page) Gets the written text from the page getAuthor() Gets the author of a written book getTitle() Gets the title the scanned item getCopyStatus() Gets the state of a written book"},{"location":"peripherals/scanner/#getpagepage","title":"getPage(page)","text":"<p>Description</p> <p>Gets the written text from the page</p> <p>Parameters</p> <ol> <li>page: number - The page index to get</li> </ol> <p>Returns</p> <ol> <li>boolean - The state of the operation</li> <li>string - The text from the book, or an error message</li> </ol>"},{"location":"peripherals/scanner/#getauthor","title":"getAuthor()","text":"<p>Description</p> <p>Gets the author of the book (only supported on written books)</p> <p>Returns</p> <ol> <li>boolean - The state of the operation</li> <li>string - The author of the book, or an error message</li> </ol>"},{"location":"peripherals/scanner/#gettitle","title":"getTitle()","text":"<p>Description</p> <p>Gets the title of the book (supported by written books, and printed pages/books)</p> <p>Returns</p> <ol> <li>boolean - The state of the operation</li> <li>string - The Title of the book, or an error message</li> </ol>"},{"location":"peripherals/scanner/#getcopystatus","title":"getCopyStatus()","text":"<p>Description</p> <p>Gets the copy status of the book (only supported by written books)</p> <p>\ud83d\udca1 IMPORTANT</p> <p>The values for the copy status are returned as such <code>\"ORIGINAL\", \"COPY\", \"COPY OF COPY\"</code></p> <p>Returns</p> <ol> <li>boolean - The state of the operation</li> <li>string - The copy state of the book, or an error message</li> </ol>"},{"location":"peripherals/spawner-interface/","title":"Spawner Interface","text":"<p>Allows for manipulating spawners</p> Functions Description getCurrentlySpawningMob() Gets the current spawning mob in the spawner captureSpawner([ inventory ], [ slot ]) Makes the spawner drop itself changeSpawner(inventory, slot, [ force ]) Makes the spawner swap what mob it spawns"},{"location":"peripherals/spawner-interface/#getcurrentlyspawningmob","title":"getCurrentlySpawningMob()","text":""},{"location":"peripherals/spawner-interface/#description","title":"Description","text":"<p>Gets the current spawning mob in the spawner</p> <p>Returns</p> <ol> <li>boolean | string - The state of the operation or the id of the spawning mob</li> <li>string - Error message, If there is a failure on the operation</li> </ol>"},{"location":"peripherals/spawner-interface/#capturespawner-inventory-slot","title":"captureSpawner([ inventory ], [ slot ])","text":"<p>Description</p> <p>Makes the spawner drop itself</p> <p>if the parameters are passed store the current mob on a spawner card.</p> <p>Parameters</p> <ol> <li>inventory: string - a inventory that has a spawner card</li> <li>slot: number - the slot where the spawner card is located</li> </ol> <p>Returns</p> <ol> <li>boolean - The state of the operation</li> <li>string - Error message, If there is a failure on the operation</li> </ol>"},{"location":"peripherals/spawner-interface/#changespawnerinventory-slot-force","title":"changeSpawner(inventory, slot, [ force ])","text":"<p>Description</p> <p>Makes the spawner swap what mob it spawns</p> <p>Parameters</p> <ol> <li>inventory: string - a inventory that has a spawner card</li> <li>slot: number - the slot where the spawner card is located</li> <li>?force: boolean - if set, the mob that was in the spawner is discarted</li> </ol> <p>Returns</p> <ol> <li>boolean - The state of the operation</li> <li>string - Error message, If there is a failure on the operation</li> </ol>"},{"location":"peripherals/trading-interface/","title":"Trading Interface","text":"<p>Allows for automatic trading and manipulation of some villager properties</p> Functions Description getProfession() Gets the current villager profession getTrades() Gets all available trades on for a villager trade(from, to, trade) Makes a trade with a villager restock() Forces a villager to restock its trades cycleTrades() Forces a villager to reset its trades"},{"location":"peripherals/trading-interface/#getprofession","title":"getProfession()","text":"<p>Description</p> <p>Gets the current villager profession </p> <p>Returns</p> <ol> <li>boolean - The state of the operation</li> <li>string - Error message, If there is a failure on the operation or the profession name</li> </ol>"},{"location":"peripherals/trading-interface/#gettrades","title":"getTrades()","text":"<p>Description</p> <p>Gets all available trades on for a villager</p> <p>Returns</p> <ol> <li>boolean - The state of the operation</li> <li>string | table - Error message, If there is a failure on the operation or a table representing the trades</li> </ol>"},{"location":"peripherals/trading-interface/#tradefrom-to-trade","title":"trade(from, to, trade)","text":"<p>Description</p> <p>Makes a trade with a villager</p> <p>Parameters</p> <ol> <li>from: string - a inventory from where to get the trade resources</li> <li>to: string - a inventory to place the trade result</li> <li>trade: number - the index of the trade</li> </ol> <p>Returns</p> <ol> <li>boolean - The state of the operation</li> <li>string - Error message, If there is a failure on the operation</li> </ol>"},{"location":"peripherals/trading-interface/#restock","title":"restock()","text":"<p>Description</p> <p>Forces a villager to restock its trades</p> <p>Returns</p> <ol> <li>boolean - The state of the operation</li> <li>string - Error message, If there is a failure on the operation</li> </ol>"},{"location":"peripherals/trading-interface/#cycletrades","title":"cycleTrades()","text":"<p>Description</p> <p>Forces a villager to reset its trades</p> <p>Returns</p> <ol> <li>boolean - The state of the operation</li> <li>string - Error message, If there is a failure on the operation</li> </ol>"},{"location":"peripherals/xp-bottler/","title":"XP Bottler","text":"<p>Allows players to store xp from a XP Collector into bottles</p> Functions Description bottleXP(from, to, xp_collector) Store xp in bottles"},{"location":"peripherals/xp-bottler/#bottlexpfrom-to-xp_collector","title":"bottleXP(from, to, xp_collector)","text":"<p>Description</p> <p>Store xp in bottles</p> <p>Parameters</p> <ol> <li>from: string - a inventory from where to get the bottles</li> <li>to: string - a inventory to place the bottled xp</li> <li>xp_collector: string - the xp collector from where to get the XP</li> </ol> <p>Returns</p> <ol> <li>boolean - The state of the operation</li> <li>string - Error message, If there is a failure on the operation</li> </ol>"},{"location":"peripherals/xp-collector/","title":"XP Collector","text":"<p>Store XP orbs around itself, and can also store player XP if right clicked</p> Functions Description dumpXP() Deletes all stored XP getCurrentXP() Get a number representing the amount of XP stored"},{"location":"peripherals/xp-collector/#dumpxp","title":"dumpXP()","text":"<p>Description</p> <p>Deletes all stored XP</p> <p>Returns</p> <ol> <li>boolean - The state of the operation</li> <li>string - Error message, If there is a failure on the operation</li> </ol>"},{"location":"peripherals/xp-collector/#getcurrentxp","title":"getCurrentXP()","text":"<p>Description</p> <p>Get a number representing the amount of XP stored</p> <p>Returns</p> <ol> <li>integer - the amount of xp stored</li> </ol>"},{"location":"upgrades/ender-bag-turtle/","title":"Ender Bag Upgrade","text":"<p>Allows for manipulating the contents of a turtle owner player ender chest</p> <p>All of the functions present here follows the rules of the Inventory API, but the the target inventory from where  to send items to on <code>pushItems()</code> is ommited and its always the turtle, and the same applies to getting item from on <code>pullItems()</code></p>"},{"location":"upgrades/magnetic-turtle/","title":"Magnetic Upgrade","text":"<p>Allows for using the magnet in turtles</p> Functions Description magnetize(distance) Pulls items from distances using fuel"},{"location":"upgrades/magnetic-turtle/#magnetizedistance","title":"magnetize(distance)","text":"<p>Description</p> <p>Pulls items from distances using fuel </p> <p>\ud83d\udca1 IMPORTANT</p> <p>This action consumes fuel in the rate of distance squared</p> <p>Parameters</p> <ol> <li>distance: number - a distance in blocks</li> </ol> <p>Returns</p> <ol> <li>boolean - The state of the operation</li> <li>string - error message, If there is a failure on the operation</li> </ol>"},{"location":"upgrades/solar-turtle/","title":"Solar Upgrade","text":"<p>Allows for charging turtles via sun energy</p>"}]}